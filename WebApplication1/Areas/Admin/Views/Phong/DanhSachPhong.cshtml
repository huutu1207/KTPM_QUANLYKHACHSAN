@model IEnumerable<WebApplication1.Areas.PhongViewModel>
@{
    ViewBag.Title = "Danh Sách Phòng";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
    ViewBag.DiaChi = 1;
}
<style>
    /* Global styles */
    .room-management {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.05);
    }

    /* Page header */
    .room-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        padding-bottom: 15px;
        border-bottom: 2px solid #e1e1e1;
    }

    .room-title {
        font-size: 24px;
        font-weight: 600;
        color: #2c3e50;
        margin: 0;
    }

    /* Create new button */
    .btn-add-room {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        font-weight: 500;
        display: flex;
        align-items: center;
        transition: all 0.3s ease;
        text-decoration: none;
    }

        .btn-add-room:hover {
            background-color: #3d8b40;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

        .btn-add-room i {
            margin-right: 8px;
        }

    /* Room grid layout */
    .room-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 20px;
    }

    /* Room card styling */
    .room-card {
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.08);
        transition: all 0.3s ease;
        position: relative;
        height: 180px;
    }

        .room-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 16px rgba(0, 0, 0, 0.12);
        }

        .room-card a {
            text-decoration: none;
            color: inherit;
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        /* Room status colors */
        .room-card.available {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-left: 5px solid #28a745;
        }

        .room-card.reserved {
            background: linear-gradient(135deg, #fff5f5, #ffe8e8);
            border-left: 5px solid #ffc107;
        }

        .room-card.occupied {
            background: linear-gradient(135deg, #ffeded, #ffdada);
            border-left: 5px solid #dc3545;
        }

    /* Room card header */
    .room-number {
        background-color: rgba(0, 0, 0, 0.03);
        padding: 12px 15px;
        font-size: 18px;
        font-weight: 600;
        color: #343a40;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

    /* Room card body */
    .room-details {
        padding: 15px;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .room-detail-item {
        display: flex;
        align-items: center;
        margin-bottom: 8px;
        color: #555;
        font-size: 14px;
    }

        .room-detail-item i {
            margin-right: 8px;
            width: 18px;
            text-align: center;
            color: #6c757d;
        }

    /* Status indicators */
    .status-badge {
        position: absolute;
        top: 10px;
        right: 10px;
        padding: 4px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .status-available {
        background-color: rgba(40, 167, 69, 0.1);
        color: #28a745;
    }

    .status-reserved {
        background-color: rgba(255, 193, 7, 0.1);
        color: #d39e00;
    }

    .status-occupied {
        background-color: rgba(220, 53, 69, 0.1);
        color: #dc3545;
    }

    /* Filter section */
    .room-filters {
        display: flex;
        gap: 15px;
        margin-bottom: 20px;
    }

    .filter-btn {
        padding: 8px 15px;
        border: none;
        border-radius: 20px;
        background-color: #e9ecef;
        color: #495057;
        cursor: pointer;
        transition: all 0.2s;
    }

        .filter-btn:hover, .filter-btn.active {
            background-color: #343a40;
            color: white;
        }

    /* Responsive adjustments */


    .room-header {
        flex-direction: column;
        align-items: flex-start;
    }

    .btn-add-room {
        margin-top: 15px;
    }






    /* css cho nút vô hiệu hóa á nghe    */
    /* Disable button styling */
    .room-card {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    /* Nội dung chính của phòng: dùng flex để đẩy nút xuống */
    .room-card-content {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
    }

    /* Nút "Vô hiệu hóa" căn giữa dưới cùng */
    .room-card .btn-disable {
        margin-top: auto; /* đẩy nút xuống dưới cùng */
        margin-bottom: 16px; /* khoảng cách với viền dưới */
        align-self: center; /* căn giữa theo chiều ngang */
        background-color: #e74c3c;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 25px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .room-card .btn-disable:hover {
            background-color: #c0392b;
            transform: translateY(-2px);
        }
    /* Nút "Vô hiệu hóa" */
    .room-card .btn-disable {
        margin-top: auto; /* đẩy nút xuống dưới cùng */
        margin-bottom: 16px; /* khoảng cách với viền dưới */
        align-self: center; /* căn giữa theo chiều ngang */
        background-color: #e74c3c; /* đỏ */
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 25px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .room-card .btn-disable:hover {
            background-color: #c0392b;
            transform: translateY(-2px);
        }

    /* Nút "Mở vô hiệu hóa" */
    .room-card .btn-enable {
        margin-top: auto; /* đẩy nút xuống dưới cùng */
        margin-bottom: 16px; /* khoảng cách với viền dưới */
        align-self: center; /* căn giữa theo chiều ngang */
        background-color: #28a745; /* xanh lá */
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 25px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .room-card .btn-enable:hover {
            background-color: #1e7e34;
            transform: translateY(-2px);
        }

</style>

<div class="room-management">
    <div class="room-header">
        <h2 class="room-title">Room Management</h2>
        <a href="@Url.Action("Create", "Phong", new { area = "Admin" })" class="btn-add-room">
            <i class="fas fa-plus-circle"></i> Add New Room
        </a>
    </div>

    <div class="room-filters">
        <button class="filter-btn active">All Rooms</button>
        <button class="filter-btn">Available</button>
        <button class="filter-btn">Reserved</button>
        <button class="filter-btn">Occupied</button>
    </div>

    <div class="room-grid">
        @foreach (var phong in Model)
        {
            string roomClass = "available";
            string statusText = "Available";
            string statusBadgeClass = "status-available";

            if (phong.SoLuongDaDat > 0 && phong.SoLuongDangO == 0)
            {
                roomClass = "reserved";
                statusText = "Reserved";
                statusBadgeClass = "status-reserved";
            }
            else if (phong.SoLuongDangO > 0)
            {
                roomClass = "occupied";
                statusText = "Occupied";
                statusBadgeClass = "status-occupied";
            }
            <div class="room-card @roomClass">
                <div class="room-card-content">
                    <a href="@Url.Action("Chitietphong", "Phong", new { MaPH = phong.MaPH })" style="flex-grow:1">
                        <div class="room-number">Room @phong.SoPH</div>
                        <div class="status-badge @statusBadgeClass">@statusText</div>
                        <div class="room-details">
                            <div class="room-detail-item">
                                <i class="fas fa-bookmark"></i>
                                <span>Booked: @phong.SoLuongDaDat guests</span>
                            </div>
                            <div class="room-detail-item">
                                <i class="fas fa-user-check"></i>
                                <span>Staying: @phong.SoLuongDangO guests</span>
                            </div>
                        </div>
                    </a>
                    @if (phong.IsDisabled) 
                    {
                        <button class="btn btn-enable" data-id="@phong.MaPH" data-bs-toggle="modal" data-bs-target="#confirmEnableModal">
                            Mở vô hiệu hóa
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-disable" data-id="@phong.MaPH" data-bs-toggle="modal" data-bs-target="#confirmDisableModal">
                            Vô hiệu hóa
                        </button>
                    }

                </div>
            </div>

        }
    </div>



    <form id="disableForm" method="post" action="/Admin/Phong/VoHieuHoa">
        <input type="hidden" name="MaPH" id="selectedMaPH" />
        @Html.AntiForgeryToken()
    </form>



    <form id="enableForm" method="post" action="/Admin/Phong/MoVoHieuHoa">
        <input type="hidden" name="MaPH" id="selectedEnableMaPH" />
        @Html.AntiForgeryToken()
    </form>




    <!-- Modal chỉ cần 1 cái -->
    <div class="modal fade" id="confirmDisableModal" tabindex="-1" aria-labelledby="confirmDisableModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmDisableModalLabel">Xác nhận vô hiệu hóa</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
                </div>
                <div class="modal-body">
                    Bạn có chắc chắn muốn vô hiệu hóa phòng này không?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="button" class="btn btn-danger" id="confirmDisableBtn">Vô hiệu hóa Phòng</button>
                </div>
            </div>
        </div>
    </div>




    <!-- Modal xác nhận mở vô hiệu hóa -->
    <div class="modal fade" id="confirmEnableModal" tabindex="-1" aria-labelledby="confirmEnableModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmEnableModalLabel">Xác nhận mở vô hiệu hóa</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
                </div>
                <div class="modal-body">
                    Bạn có chắc chắn muốn mở vô hiệu hóa phòng này không?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="button" class="btn btn-success" id="confirmEnableBtn">Mở vô hiệu hóa phòng</button>
                </div>
            </div>
        </div>
    </div>

</div>

<script>
    // Simple filter functionality
    document.addEventListener('DOMContentLoaded', function () {
        const filterButtons = document.querySelectorAll('.filter-btn');
        const roomCards = document.querySelectorAll('.room-card');

        filterButtons.forEach(button => {
            button.addEventListener('click', function () {
                // Update active button
                filterButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');

                const filter = this.textContent.trim().toLowerCase();

                // Show/hide rooms based on filter
                roomCards.forEach(card => {
                    if (filter === 'all rooms') {
                        card.style.display = 'block';
                    } else {
                        if (card.classList.contains(filter)) {
                            card.style.display = 'block';
                        } else {
                            card.style.display = 'none';
                        }
                    }
                });
            });
        });
    });
</script>




<script>
    document.addEventListener('DOMContentLoaded', function () {
        let selectedRoomId = null;

        // Khi bấm nút "Vô hiệu hóa", lưu MaPH vào biến và input ẩn
        document.querySelectorAll('.btn-disable').forEach(button => {
            button.addEventListener('click', function () {
                selectedRoomId = this.getAttribute('data-id');
                document.getElementById('selectedMaPH').value = selectedRoomId;
            });
        });

        // Khi bấm nút xác nhận trong modal, gửi form
        document.getElementById('confirmDisableBtn').addEventListener('click', function () {
            if (selectedRoomId) {
                document.getElementById('disableForm').submit();
            }
        });
    });
</script>



<script>
    let selectedEnableId = null;

    // Khi bấm nút "Mở vô hiệu hóa"
    document.querySelectorAll('.btn-enable').forEach(btn => {
        btn.addEventListener('click', function () {
            selectedEnableId = this.getAttribute('data-id');
        });
    });

    // Khi xác nhận trong modal
    document.getElementById('confirmEnableBtn').addEventListener('click', function () {
        if (selectedEnableId) {
            document.getElementById('selectedEnableMaPH').value = selectedEnableId;
            document.getElementById('enableForm').submit();
        }
    });
</script>
